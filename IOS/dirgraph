#!/usr/bin/env sh

POSIXLY_CORRECT=yes
OPTIND=1
DIR=$(pwd)
n=0
i=0
ND=0
NF=0


#checking arguments
while getopts ni: opt; do
    case $opt in
        n) n=1
        ;;
        i) i=1
        ;;
        \?) printf "Wrong\n" 1>&2
            exit 1
        ;;
    esac
done

shift "$((OPTIND-1))"

if test $# -gt 1 ; then
    #more arguments
    printf "Wrong\n" 1>&2
    exit 1
elif test $# -eq 1; then
    if test -d $1;then 
        DIR=$1
    else
        #not a directory
        printf "Wrong\n" 1>&2
        exit 1
    fi
fi


if test $i -eq 1; then  
    #if -i is on                   
    ND=$(ls -lR $(find $DIR -type d,f 2> /dev/null| sed 's/^.*\(.*\/.*\).*$/\1/'| sed 's/^\/\(.*\).*$/\1/' | grep -E "$OPTARG" | sed 's/^/-I /' ) $DIR 2> /dev/null| grep "^d" | wc -l)
    NF=$(ls -lR $(find $DIR -type d,f 2> /dev/null| sed 's/^.*\(.*\/.*\).*$/\1/'| sed 's/^\/\(.*\).*$/\1/' | grep -E "$OPTARG" | sed 's/^/-I /' ) $DIR 2> /dev/null| grep "^-" | wc -l)
# find every file and directory,                    ^in format without dots and /                           ^find that fulfill this regex  ^ add -I to ignore from ls  
else 
    ND=$(ls -lR $DIR 2> /dev/null| grep "^d" | wc -l)
    NF=$(ls -lR $DIR 2> /dev/null| grep "^-" | wc -l)
fi

#File size histogram
FSHIST() #$1 DIR
{   
    if test $i -eq 1; then
        list_of_sizes=$(ls -lR $(find $DIR -type d,f 2> /dev/null| sed 's/^.*\(.*\/.*\).*$/\1/'| sed 's/^\/\(.*\).*$/\1/'  | grep -E "$OPTARG" | sed 's/^/-I /') $DIR 2> /dev/null| grep "^-" | sed -E 's/([^0-9]*([0-9]*)){2}.*/\2/')
    else
        list_of_sizes=$(ls -lR $DIR 2> /dev/null| grep "^-" | sed -E 's/([^0-9]*([0-9]*)){2}.*/\2/')
    fi

    sizes="100 1024 10240 102400 1048576 10485760 104857600 1073741824 1073741824"

    print_proper()
    {
        to_print="<100 B  ,<1 KiB  ,<10 KiB ,<100 KiB,<1 MiB  ,<10 MiB ,<100 MiB,<1 GiB  ,>=1 GiB "
        if test $1 -eq 1; then
            printf "<100 B  "
        elif test $1 -eq 2; then
            printf "<1 KiB  "
        elif test $1 -eq 3; then
            printf "<10 KiB "
        elif test $1 -eq 4; then
            printf "<100 KiB" 
        elif test $1 -eq 5; then
            printf "<1 MiB  "
        elif test $1 -eq 6; then
            printf "<10 MiB "
        elif test $1 -eq 7; then
            printf "<100 MiB"
        elif test $1 -eq 8; then
            printf "<1 GiB  "
        elif test $1 -eq 9; then
            printf ">=1 GiB "
        fi                                
    }

    arg=$list_of_sizes
    sum=0
    last="${sizes##* }"
    to_print_count=1
  
    for i in $sizes
    do
        #calculating count of # to print
        count=0
        for j in $arg
        do
            if test $i -eq $last; then
                if test $j -gt $i; then
                    count=$((count+1))
                fi 
            elif test $j -lt $i; then
                count=$((count+1))
            fi
            shift $(( $# > 0 ? 1 : 0 ))
        done

        if test $i -ne $last; then
            count=$((count-sum))
            sum=$((sum+count))
        fi

        #checking if terminal
        if [ -t 1 ]; then
            width=$(($(tput cols)-1))
        else
            width=79
        fi

        #if normalization (-n) is on
        if test $NF -gt $width && test $n -eq 1; then
            count=$((count/(NF/width)))
        fi

        #printing length-#
        printf "  `print_proper $to_print_count`: "
        while test $count -ne 0
        do
            printf "#"
            count=$((count-1))
        done
        echo
        to_print_count=$((to_print_count+1))
    done
}


#printing
printf "Root directory: $DIR\n"
printf "Directories: $ND\n"
printf "All files: $NF\n"
printf "File size histogram:\n"

FSHIST $DIR

exit 0
